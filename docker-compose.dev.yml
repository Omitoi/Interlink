# Docker Compose for Development Environment
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: match-me-db-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-matchme_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-matchme_password}
      POSTGRES_DB: ${POSTGRES_DB:-matchme_db}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/001-schema.sql:ro
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-matchme_user} -d ${POSTGRES_DB:-matchme_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - match-me-dev-network

  # Go Backend Server (Development mode with hot reload)
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: match-me-backend-dev
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-matchme_user}:${POSTGRES_PASSWORD:-matchme_password}@postgres:5432/${POSTGRES_DB:-matchme_db}?sslmode=disable
      - JWT_SECRET=${JWT_SECRET:-your_dev_jwt_secret}
      - PORT=8080
      - GO_ENV=development
    ports:
      - "${BACKEND_PORT:-8081}:8080"
    volumes:
      - ./backend:/app
      - backend_dev_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - match-me-dev-network

  # React Frontend (Development mode with hot reload)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: match-me-frontend-dev
    environment:
      - VITE_API_BASE_URL=http://localhost:8081
    ports:
      - "${FRONTEND_PORT:-3001}:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend-dev
    restart: unless-stopped
    networks:
      - match-me-dev-network

volumes:
  postgres_dev_data:
  backend_dev_uploads:

networks:
  match-me-dev-network:
    driver: bridge
