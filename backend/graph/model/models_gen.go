// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type AuthResult struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type Bio struct {
	UserID                 string   `json:"userID"`
	AnalogPassions         []string `json:"analogPassions"`
	DigitalDelights        []string `json:"digitalDelights"`
	CollaborationInterests *string  `json:"collaborationInterests,omitempty"`
	FavoriteFood           *string  `json:"favoriteFood,omitempty"`
	FavoriteMusic          *string  `json:"favoriteMusic,omitempty"`
	User                   *User    `json:"user"`
}

type BioInput struct {
	AnalogPassions         []string `json:"analogPassions,omitempty"`
	DigitalDelights        []string `json:"digitalDelights,omitempty"`
	CollaborationInterests *string  `json:"collaborationInterests,omitempty"`
	FavoriteFood           *string  `json:"favoriteFood,omitempty"`
	FavoriteMusic          *string  `json:"favoriteMusic,omitempty"`
}

type Chat struct {
	ID             string         `json:"id"`
	User1id        string         `json:"user1ID"`
	User2id        string         `json:"user2ID"`
	LastMessageAt  *string        `json:"lastMessageAt,omitempty"`
	UnreadForUser1 bool           `json:"unreadForUser1"`
	UnreadForUser2 bool           `json:"unreadForUser2"`
	User1          *User          `json:"user1"`
	User2          *User          `json:"user2"`
	Messages       []*ChatMessage `json:"messages"`
}

type ChatMessage struct {
	ID        string `json:"id"`
	ChatID    string `json:"chatID"`
	SenderID  string `json:"senderID"`
	Content   string `json:"content"`
	CreatedAt string `json:"createdAt"`
	IsRead    bool   `json:"isRead"`
	Sender    *User  `json:"sender"`
}

type Connection struct {
	ID           string           `json:"id"`
	UserID       string           `json:"userID"`
	TargetUserID string           `json:"targetUserID"`
	Status       ConnectionStatus `json:"status"`
	CreatedAt    string           `json:"createdAt"`
	UpdatedAt    string           `json:"updatedAt"`
	User         *User            `json:"user"`
	TargetUser   *User            `json:"targetUser"`
}

type Mutation struct {
}

type PresenceUpdate struct {
	UserID     string  `json:"userID"`
	IsOnline   bool    `json:"isOnline"`
	LastOnline *string `json:"lastOnline,omitempty"`
}

type Profile struct {
	UserID             string   `json:"userID"`
	DisplayName        string   `json:"displayName"`
	AboutMe            *string  `json:"aboutMe,omitempty"`
	ProfilePictureFile *string  `json:"profilePictureFile,omitempty"`
	LocationCity       *string  `json:"locationCity,omitempty"`
	LocationLat        *float64 `json:"locationLat,omitempty"`
	LocationLon        *float64 `json:"locationLon,omitempty"`
	MaxRadiusKm        *int     `json:"maxRadiusKm,omitempty"`
	IsComplete         bool     `json:"isComplete"`
	User               *User    `json:"user"`
}

type ProfileInput struct {
	DisplayName  *string  `json:"displayName,omitempty"`
	AboutMe      *string  `json:"aboutMe,omitempty"`
	LocationCity *string  `json:"locationCity,omitempty"`
	LocationLat  *float64 `json:"locationLat,omitempty"`
	LocationLon  *float64 `json:"locationLon,omitempty"`
	MaxRadiusKm  *int     `json:"maxRadiusKm,omitempty"`
}

type Query struct {
}

type Subscription struct {
}

type TypingStatus struct {
	UserID   string `json:"userID"`
	IsTyping bool   `json:"isTyping"`
}

type User struct {
	ID         string   `json:"id"`
	Email      string   `json:"email"`
	CreatedAt  string   `json:"createdAt"`
	UpdatedAt  string   `json:"updatedAt"`
	LastOnline *string  `json:"lastOnline,omitempty"`
	Profile    *Profile `json:"profile,omitempty"`
	Bio        *Bio     `json:"bio,omitempty"`
}

type ConnectionStatus string

const (
	ConnectionStatusPending      ConnectionStatus = "PENDING"
	ConnectionStatusAccepted     ConnectionStatus = "ACCEPTED"
	ConnectionStatusDismissed    ConnectionStatus = "DISMISSED"
	ConnectionStatusDisconnected ConnectionStatus = "DISCONNECTED"
)

var AllConnectionStatus = []ConnectionStatus{
	ConnectionStatusPending,
	ConnectionStatusAccepted,
	ConnectionStatusDismissed,
	ConnectionStatusDisconnected,
}

func (e ConnectionStatus) IsValid() bool {
	switch e {
	case ConnectionStatusPending, ConnectionStatusAccepted, ConnectionStatusDismissed, ConnectionStatusDisconnected:
		return true
	}
	return false
}

func (e ConnectionStatus) String() string {
	return string(e)
}

func (e *ConnectionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConnectionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConnectionStatus", str)
	}
	return nil
}

func (e ConnectionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ConnectionStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ConnectionStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
